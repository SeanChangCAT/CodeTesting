FORMAT==100
SKIPCHECK;

#region Rule Version and Time Period APEX Nodes to 0
#note: Descendants are 0-weighted but C-Level rules may be applied => rule to 0 at beginning of rules file
['Version':{'Open Versions', 'What If Scenarios', 'Historical Versions'}] = C: 0;

['Time Period':{'ALL_MONTHS', 'Year to Date Grouped', 'Month YTD', 'Variances', 'Year-YTD', 'Month QTD'}] = C: 0;
#endregion

#region no consolidation of different currencies
#No consolidation of reporting currencies
['Currency PCR':{'All Currencies', 'All Non-US Currencies'}] = C: 0;

#For non-Headcount, FTE, Volume etc, No 'consolidation' of 'Transaction Currencies', i.e. set 'All Currencies' to 0 for 'Transaction Currency'
['Transaction Currency PCR':'All Currencies', 'Currency PCR':'Transaction Currency'] = C: 0;
#endregion

#region Bal Sheet Consolidation
# create Account PCR dimension attribute 'Type' and for Balance Sheet accounts, calculate 'Type' to be = 'EOP'
# => the value for Time Period attribute 'EOP Calculation Month' is calculated to be the last ACTUALS month of the consolidated time period
# => the value for Time Period attribute 'EOP Calculation Month Non-Actuals' is calculated to be the last month of the consolidated time period
# => the value for a bal sheet account in a cons. time period will be = the value of its last month period.
[{'YTD', 'Prior YTD', 'QTD', 'Prior QTD',
'2012-YTD', '2013-YTD', '2014-YTD', '2015-YTD', '2016-YTD', '2017-YTD', '2018-YTD',
'2012', '2013', '2014', '2015', '2016', '2017', '2018',
'201201 QTD', '201202 QTD', '201203 QTD', '201204 QTD',
'201301 QTD', '201302 QTD', '201303 QTD', '201304 QTD',
'201401 QTD', '201402 QTD', '201403 QTD', '201404 QTD',
'201501 QTD', '201502 QTD', '201603 QTD', '201504 QTD',
'201601 QTD', '201602 QTD', '201503 QTD', '201604 QTD',
'201701 QTD', '201702 QTD', '201703 QTD', '201704 QTD',
'201801 QTD', '201802 QTD', '201803 QTD', '201804 QTD',
'201201 YTD', '201202 YTD', '201203 YTD', '201204 YTD', '201205 YTD', '201206 YTD', '201207 YTD', '201208 YTD', '201209 YTD', '201210 YTD', '201211 YTD', '201212 YTD',
'201301 YTD', '201302 YTD', '201303 YTD', '201304 YTD', '201305 YTD', '201306 YTD', '201307 YTD', '201308 YTD', '201309 YTD', '201310 YTD', '201311 YTD', '201312 YTD',
'201401 YTD', '201402 YTD', '201403 YTD', '201404 YTD', '201405 YTD', '201406 YTD', '201407 YTD', '201408 YTD', '201409 YTD', '201410 YTD', '201411 YTD', '201412 YTD',
'201501 YTD', '201502 YTD', '201503 YTD', '201504 YTD', '201505 YTD', '201506 YTD', '201507 YTD', '201508 YTD', '201509 YTD', '201510 YTD', '201511 YTD', '201512 YTD',
'201601 YTD', '201602 YTD', '201603 YTD', '201604 YTD', '201605 YTD', '201606 YTD', '201607 YTD', '201608 YTD', '201609 YTD', '201610 YTD', '201611 YTD', '201612 YTD',
'201701 YTD', '201702 YTD', '201703 YTD', '201704 YTD', '201705 YTD', '201706 YTD', '201707 YTD', '201708 YTD', '201709 YTD', '201710 YTD', '201711 YTD', '201712 YTD',
'201801 YTD', '201802 YTD', '201803 YTD', '201804 YTD', '201805 YTD', '201806 YTD', '201807 YTD', '201808 YTD', '201809 YTD', '201810 YTD', '201811 YTD', '201812 YTD',
'20121', '20122', '20123', '20124',
'20131', '20132', '20133', '20134',
'20141', '20142', '20143', '20144',
'20151', '20152', '20153', '20154',
'20161', '20162', '20163', '20164',
'20171', '20172', '20173', '20174',
'20181', '20182', '20183', '20184'}] = C:
IF( ELLEV( 'Version', !Version ) = 0,
	IF( ATTRS( 'Account PCR', !Account PCR, 'Type' ) @= 'EOP',
		IF( SCAN( 'ACT', UPPER( !Version ) ) > 0,
			DB( 'PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'EOP Calculation Month'), !Transaction Currency PCR, !Currency PCR ),
			DB( 'PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'EOP Calculation Month Non-Actuals'), !Transaction Currency PCR, !Currency PCR ) ),
		CONTINUE ),
	CONTINUE );
#endregion

#region Variances
#region Time period Variances
[{'QTD Variance', 'Prior Year QTD Variance', 'YTD Variance',
'201401 YTD Variance', '201402 YTD Variance', '201403 YTD Variance', '201404 YTD Variance', '201405 YTD Variance', '201406 YTD Variance', '201407 YTD Variance', '201408 YTD Variance', '201409 YTD Variance', '201410 YTD Variance', '201411 YTD Variance',
'201501 YTD Variance', '201502 YTD Variance', '201503 YTD Variance', '201504 YTD Variance', '201505 YTD Variance', '201506 YTD Variance', '201507 YTD Variance', '201508 YTD Variance', '201509 YTD Variance', '201510 YTD Variance', '201511 YTD Variance',
'201601 YTD Variance', '201602 YTD Variance', '201603 YTD Variance', '201604 YTD Variance', '201605 YTD Variance', '201606 YTD Variance', '201607 YTD Variance', '201608 YTD Variance', '201609 YTD Variance', '201610 YTD Variance', '201611 YTD Variance',
'201701 YTD Variance', '201702 YTD Variance', '201703 YTD Variance', '201704 YTD Variance', '201705 YTD Variance', '201706 YTD Variance', '201707 YTD Variance', '201708 YTD Variance', '201709 YTD Variance', '201710 YTD Variance', '201711 YTD Variance',
'201801 YTD Variance', '201802 YTD Variance', '201803 YTD Variance', '201804 YTD Variance', '201805 YTD Variance', '201806 YTD Variance', '201807 YTD Variance', '201808 YTD Variance', '201809 YTD Variance', '201810 YTD Variance', '201811 YTD Variance'}] = C:
	CONSOLIDATECHILDREN( 'Time Period' );

['Prior Month Variance (%)'] = C:
	( ['Current Month'] - ['Prior Month'] ) \ ['Current Month'];

#AK: complete rule below
['Prior Year Variance (%)'] = C:
	( ['Current Month'] - ['Same Month Prior Year'] ) \ ['Current Month'];

['QTD Variance (%)'] = C:
	['QTD Variance'] \ ['QTD'];

['Prior Year QTD Variance (%)'] = C:
	['Prior Year QTD Variance'] \ ['QTD'];

['YTD Variance (%)'] = C:
	( ['YTD'] - ['Prior YTD'] ) \ ['YTD'];
#endregion

#region Version variance
['Act vs Plan %'] = C:
	( ['Actual'] - ['Plan'] ) \ ['Actual'];
#endregion



## QUEBIT RULES
# region Balance Sheet Calcuation for Opening Balance
# Rule 1.0 - Opening Balance for Consolidated Elements - ADDED 4/4/2017
['SALLOWANCE200'] = C:
IF(
#For QTD Periods
( LONG( !Time Period ) = 10 & SUBST(!Time Period, 1, 2) @= '20' & SCAN( 'QTD', !Time Period ) > 0 ) %
#For Quarters
( LONG( !Time Period ) = 5 & SUBST(!Time Period, 1, 2) @= '20' ) %
#For Year
( LONG( !Time Period ) = 4 & SUBST(!Time Period, 1, 2) @= '20' ) %
#For Year-YTD
( LONG( !Time Period ) = 8 & SUBST(!Time Period, 1, 2) @= '20' & SCAN( 'YTD', !Time Period ) > 0 ) %
#For Month
( LONG( !Time Period ) = 6 & SUBST(!Time Period, 1, 2) @= '20' ),
	IF( ELLEV( 'Version', !Version ) = 0,
		IF( SCAN( 'ACT', UPPER( !Version ) ) > 0,
			DB( 'PCR', 'ALLOWANCE', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, ATTRS('Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ),
			STET ),
		STET ),
	#For YTD Periods
	IF( LONG( !Time Period ) = 10 & SUBST(!Time Period, 1, 2) @= '20' & SCAN( 'YTD', !Time Period ) > 0,
		IF( ELLEV( 'Version', !Version ) = 0,
			IF( SCAN( 'ACT', UPPER( !Version ) ) > 0,
				DB( 'PCR', 'ALLOWANCE', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, ATTRS( 'Time Period', SUBST( !Time Period, 1, 4 ), 'Prior Calendar Period' ) | '12', !Transaction Currency PCR, !Currency PCR ),
				STET ),
			STET ),
		STET )
	);

# Rule 1.1 - Opening Balance for Leaf Elements - ADDED 4/4/2017
['SALLOWANCE200'] = N:
IF( ELLEV( 'Time Period', !Time Period ) = 0,
	IF( ELLEV( 'Version', !Version ) = 0,
		IF( SCAN( 'ACT', UPPER( !Version ) ) > 0,
			DB( 'PCR', 'ALLOWANCE', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, ATTRS('Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ),
			STET ),
		STET ),
	STET );
# endregion

# region Balance Sheet Calcuation for Ending Balance
# Rule 2.0 - Ending Balance for Consolidated Elements - ADDED 4/4/2017
['SALLOWANCEEB'] = C:
	['SALLOWANCE200'] + ['SALLOWANCE205'] + ['SALLOWANCE210'] + ['SALLOWANCE220'] + ['SALLOWANCE230'] +
	['SALLOWANCE240'] + ['SALLOWANCE250'] + ['SALLOWANCE255'] + ['SALLOWANCE260'];
# endregion



#Beginning of added calculations 9/28/16 by Gavin D.
['YTD Net Inc', {'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	DB( 'PCR', 'NetInc', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD New Business-CFCA'] = N:
	DB( 'PCR', 'xNB-COMM ACCT', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD TOTREVENUE'] = N:
	DB( 'PCR', 'TOTREVENUE', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD Accountable Profit'] = N:
	DB( 'PCR', 'Accountable Profit', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD PLBEFORENCI'] = N:
	DB( 'PCR', 'PLBEFORENCI', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD New Business-Retail'] = N:
	DB( 'PCR', 'New Business-Retail', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD New Business-Wholesale'] = N:
	DB( 'PCR', 'xNB-WHOLESALE', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD Total New Business'] = N:
	DB( 'PCR', 'Total New Business', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD CFSC Revenue - Margin'] = N:
	DB( 'PCR', 'CFSC Revenue - Margin', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD CFSC Interest Expense - Margin (Includes Points On Forward)'] = N:
	DB( 'PCR', 'CFSC Interest Expense - Margin (Includes Points On Forward)', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD CFSC Margin Dollars'] = N:
	['YTD CFSC Revenue - Margin'] + ['YTD CFSC Interest Expense - Margin (Includes Points On Forward)'];

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Calculation Changes 10/26/2016; Gavin Driskell
['WRITE-OFFS - NET', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	['SALLOWANCE220'] + ['SALLOWANCE230'];

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Calculation Changes 10/26/2016; Gavin Driskell
['YTD Write-Offs', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	DB( 'PCR', 'WRITE-OFFS - NET', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Commented out by QueBIT on 4/14/2017
#['YTD Write-offs','00','Key Measures Calculation',{'Plan','Act @ Prior Month Rate','Act @ BP Rate','Forecast','Plan',
#'What If Scenario 1','What If Scenario 2','What If Scenario 3'}]=N:
#	DB('PCR','WRITE-OFFS - NET',!Entity,!Organizational Unit PCR,'00','All Datasources for Key Measures Calculation',!Version,!Time Period | 'YTD',!Transaction Currency PCR,!Currency PCR);

#YTD Write-Offs for Actual is broken off from the previous calc as Key Measures Calculation is NOT a child of All Datasources for Key Measures Calculation, which is currently used to drive plan as the Business Plan
#Datasource is a child of it. Changed 10/12/16, Gavin D.

##QUEBIT RULE CHANGE - Commented out by QueBIT on 4/14/2017
#['YTD Write-offs','00','Key Measures Calculation','Actual']=N:
#	DB('PCR','WRITE-OFFS - NET',!Entity,!Organizational Unit PCR,'00','Key Measures Calculation',!Version,!Time Period | 'YTD',!Transaction Currency PCR,!Currency PCR);

#End of Calculation Change 10/26/2016

['YTD SG&A'] = N:
	DB( 'PCR', 'TOTGENOPADM', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD PROVCREDIT'] = N:
	DB( 'PCR', 'PROVCREDIT', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD RETAIL REVENUE YIELD'] = N:
	DB( 'PCR', 'RETAIL REVENUE YIELD', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['YTD WHOLESALE REVENUE YIELD'] = N:
	DB( 'PCR', 'WHOLESALE REVENUE YIELD', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

['MTD ANNUALIZED CFSC REVENUE - EXTERNAL MARGIN'] = N:
	['CFSC REVENUE - EXTERNAL MARGIN'] * 12;

['MTD ANNUALIZED CFSC INTEREST EXPENSE - MARGIN'] = N:
	['CFSC Interest Expense - Margin (Includes Ptns on Forward)'] * 12;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Modified YTD Average Managed Assets calc 9/23/16 by Gavin D.
['YTD AVERAGE MANAGED ASSETS', '00', 'Key Measures Calculation', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Managed Assets YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources for Key Measures Calculation', !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'Managed Assets', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources for Key Measures Calculation', !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' ) + 1 );
#End of calculations added 9/28/16 by Gavin D.

#region STET time periods <= Actuals Through Date
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	IF( NUMBR( !Time Period ) <= ATTRN( 'Version', !Version, 'Actuals Through Date' ),
		STET,
		CONTINUE );
#endregion

# no variances for transaction currency (only for rptg currency)
[{'Act @ BP Rate', 'Act @ Prior Month Rate', 'Act vs Plan Var Excl FX', 'Act vs Plan Var', 'Act vs Plan FX Var', 'Act vs PY Act Var Excl FX', 'Act vs PY Act FX Var', 'Act vs PY Act Var'}, 'Currency PCR':'Transaction Currency'] = C: 0;

[{'Act @ BP Rate', 'Act @ Prior Month Rate', 'Act vs Plan Var Excl FX', 'Act vs Plan Var', 'Act vs Plan FX Var', 'Act vs PY Act Var Excl FX', 'Act vs PY Act FX Var', 'Act vs PY Act Var'}, 'Currency PCR':'Transaction Currency'] = N: 0;

# $ Var and Var Exl FX calcs: calculate based on Version Dim Weights
# note: this rule is only needed to 'overrule' other possible other C-Level rules that may otherwise be applied to the below elements;
# note (cont.): it is acceptable to use CONSOLIDATECHILDREN as the # of children is low (2 elements in this case); CONSOLIDATECHILDREN should not be used against a very large # of child elements
## 'Act vs Plan' removed from this consolidation and added after new Rate Volume calculations below. Gavin D., 9/28/16.
[{'Act vs Plan Var Excl FX', 'Act vs Plan Var', 'Act vs PY Act Var Excl FX', 'Act vs PY Act Var', 'Act vs Act @ BP Rate', 'Act vs Act @ Prior Month Rate'}] = C:
	CONSOLIDATECHILDREN( 'Version' );

#region FX Var
#note: in FX cube, put rule in place that sets 'Current Plan' = STET such that the current plan renders a value in the FX model
#Act Vs. PY Act
['Act Vs PY Act FX Var'] = N:
	['Actual']
	- ['Actual', 'Transaction Currency']
	* IF( ATTRS( 'Account PCR', !Account PCR, 'Is Balance Sheet Acct' ) @= 'Y',
		DB( 'FX', !Transaction Currency PCR, !Currency PCR, 'PY Actual', STR( NUMBR( !Time Period ) - 100, 6, 0), 'Actual Rate Balance Sheet' ),
		DB( 'FX', !Transaction Currency PCR, !Currency PCR, 'PY Actual', STR( NUMBR( !Time Period ) - 100, 6, 0), 'Actual Rate PnL' )
	);

#Act vs Plan
['Act vs Plan FX Var'] = N:
	['Actual']
	- ['Actual', 'Transaction Currency']
	* IF( ATTRS( 'Account PCR', !Account PCR, 'Is Balance Sheet Acct' ) @= 'Y',
		DB( 'FX', !Transaction Currency PCR, !Currency PCR, 'Current Plan', !Time Period, 'Business Plan Rate Balance Sheet' ),
		DB( 'FX', !Transaction Currency PCR, !Currency PCR, 'Current Plan', !Version, !Time Period, 'Business Plan Rate PnL' ) );
#endregion
#endregion

#region ALLOCATIONS

[{'xOBAssets'}] = N: STET;

#OB Profit Employed
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'OBProfitEmployed'] = C:
	DB( 'PCR', 'PROFEMPLYD', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR );

#region Fed Inc Tax LM
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Federal Tax Rate', 'Entity':'LM', '00', '00000-LM', 'Datasource':'Input', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
#	DB('PCR Inputs', 'Federal Tax Rate','LM','00000-LM', !Version,subst(!Time Period,1,4) | '12');
	DB( 'PCR', 'TOTTAX', !Entity, 'LM', !Program Type, 'Source Systems', !Version, !Time Period, !Transaction Currency PCR, !Currency PCR )
	\ DB( 'PCR', 'PLBEFORETAX', !Entity, 'LM', !Program Type, 'Source Systems', !Version, !Time Period, !Transaction Currency PCR, !Currency PCR );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Calculated Federal Tax', 'Entity':'LM', '00', 'Datasource':'Allocation Calculation', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
	DB( 'PCR', 'Federal Tax Rate', 'LM', '00000-LM', '00', 'Input', !Version, !Time Period, 'USD', 'Transaction Currency' )
	* DB( 'PCR', 'PLBEFORETAX', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources with Allocation Calculation', !Version, !Time Period, 'All Currencies', 'USD' );
#endregion

#region CIF
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'CIF FX Points', '00', 'Datasource':'Input', 'Entity':{'DC', 'DU', 'EP', 'FR', 'FV', 'HA', 'JD', 'KJ', 'KN', 'L7', 'LK', 'OC', 'UT', 'YH', 'ZX'}, 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
IF( SUBST( !Organizational Unit PCR, 7, 2 ) @= !Entity,
	DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, !Time Period ),
	CONTINUE );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'OBDeferredTax'] = C:
	DB( 'PCR', 'DEFERINCTAX', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'OBAssets'] = C:
	DB( 'PCR', 'TOTASSET', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'OB CIF IC Loans'] = C:
	DB( 'PCR', 'CIF IC Loans Allocated to CIF Org Units', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR );

#FedIncTaxRate & Tax for CIF Org Units
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Federal Tax Rate', 'Datasource':'Input', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
IF( ELISANC( 'Organizational Unit PCR', 'CIF Org Units Allocations', !Organizational Unit PCR ) > 0,
		DB( 'PCR Inputs', 'Federal Tax Rate', 'GV', '00000-GV', !Version, SUBST( !Time Period, 1, 4 ) | '12'),
		CONTINUE );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Calculated Federal Tax', '00', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
IF( ELISANC( 'Organizational Unit PCR', 'CIF Org Units Allocations', !Organizational Unit PCR ) > 0,
		- DB( 'PCR Inputs', 'Federal Tax Rate', 'GV', '00000-GV', !Version, SUBST( !Time Period, 1, 4 ) | '12' )
		* DB( 'PCR', 'PLBEFORETAX', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period, 'All Currencies', 'USD' ),
		CONTINUE );
#endregion

#region Cash Allocation calculations

##QUEBIT RULE CHANGE - Changed on 5/17/2017
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Entity':{'P3', 'WU'}, {'PCR 1 Cash Threshold', 'xCash200M'}, 'Datasource':'Input', '00', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
	DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, !Time Period );
##ORIGINAL PCR 1 Cash Threshold AND xCash200M RULE
#[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Entity':{'P3', 'WU'}, {'PCR 1 Cash Threshold', 'xCash200M'}, 'Datasource':'Input', '00', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
#	DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, SUBST( !Time Period, 1, 4 ) | '12' );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Entity':'P3', 'xCash1B', '00', 'Datasource':'Allocation Calculation', 'Organizational Unit PCR':'00000-P3', 'Transaction Currency PCR':'USD', 'Currency PCR':'Transaction Currency'] = N:
IF( DB( 'PCR', 'Cash', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period, 'All Currencies', 'USD' ) >
	( DB( 'PCR', 'PCR 1 Cash Threshold', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period, 'USD', 'Transaction Currency' )
		+ DB( 'PCR', 'xCash200M', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period,'USD','Transaction Currency')),
			DB('PCR', 'PCR 1 Cash Threshold', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period, 'USD','Transaction Currency'),
			DB('PCR', 'Cash', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period, 'All Currencies','USD')
			- DB('PCR', 'xCash200M', 'P3 and WU', 'FPD', '00', 'All Data Sources without Allocations', !Version, !Time Period,'USD','Transaction Currency'));

[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'P3','xCashRemainder','Organizational Unit PCR':'00000-P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
	if (DB('PCR', 'Cash', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period, 'All Currencies','USD') >
		( DB('PCR', 'PCR 1 Cash Threshold', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period,'USD','Transaction Currency')
		+ DB('PCR', 'xCash200M', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period,'USD','Transaction Currency')),
		DB('PCR', 'Cash', 'P3 and WU', 'FPD', 'All Program Types', 'All Data Sources without Allocations', !Version, !Time Period, 'All Currencies','USD')
		-DB('PCR', 'xCash200M', 'P3 and WU', 'FPD', '00', 'All Data Sources without Allocations', !Version, !Time Period,'USD','Transaction Currency')
		-DB('PCR', 'xCash1B', 'P3 and WU', 'FPD', '00', 'All Datasources', !Version, !Time Period,'USD','Transaction Currency')
		,0);
#endregion

#region Interest Expense
#region Debt - Equity ratio
#P3
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Debt-Equity Ratio','Entity':'P3','Allocation Calculation','Organizational Unit PCR':'00000-P3','00','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR', 'TOTDEBT', 'P3 and WU', 'FPD', 'All Program Types', 'All Datasources without Allocation Calculation', !Version,!Time Period, 'All Currencies','USD')
	/DB('PCR', 'TOTEQUITY', 'P3 and WU', 'FPD', 'All Program Types', 'All Datasources without Allocation Calculation', !Version,!Time Period, 'All Currencies','USD');
#LM
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Debt-Equity Ratio','Entity':'LM','Datasource':'Allocation Calculation','00000-LM','00','Transaction Currency PCR':'USD','Transaction Currency']= N:
 	DB('PCR', 'TOTDEBT',!Entity, 'FPD', 'All Program Types', 'All Datasources without Allocations', !Version,!Time Period,'All Currencies','USD')
	/DB('PCR', 'TOTEQUITY',!Entity, 'FPD', 'All Program Types', 'All Datasources without Allocations', !Version,!Time Period,'All Currencies','USD');
#endregion
#region Calculated Debt = (total assets + total other liab) / (debt to equity ratio +1) * (debt to equity ratio)
#P3
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'P3','Calculated Debt','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
	(DB('PCR', 'TOTASSET',  'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Datasources without Allocation Calculation', !Version,!Time Period, 'All Currencies', 'USD')
     + DB('PCR', 'TOTOTHLIAB', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Datasources without Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD') )
     /(DB('PCR', 'Debt-Equity Ratio',!Entity,'00000-P3','00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD') +1 )
     * DB('PCR', 'Debt-Equity Ratio',!Entity,'00000-P3','00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD');
#LM
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'LM','Calculated Debt','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
	(DB('PCR', 'TOTASSET', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
     + DB('PCR', 'TOTOTHLIAB', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD') )
     /(DB('PCR', 'Debt-Equity Ratio',!Entity, '00000-LM','00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD') +1 )
     * DB('PCR', 'Debt-Equity Ratio', !Entity, '00000-LM','00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD');
#endregion
#region Calculated Equity =(total assets + total other liab) / (debt to equity ratio +1)
#P3
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Equity','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
	(DB('PCR', 'TOTASSET',  'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Datasources without Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	+ DB('PCR', 'TOTOTHLIAB',  'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Datasources without Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD') )
     /(DB('PCR', 'Debt-Equity Ratio',!Entity,'00000-P3','00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')+1) ;
#LM
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Equity','Entity':'LM','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTASSET', !Entity, !Organizational Unit PCR,'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	+ DB('PCR', 'TOTOTHLIAB', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD') )
     /(DB('PCR', 'Debt-Equity Ratio',!Entity, '00000-LM','00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')+1) ;
#endregion
#region Avg Debt and Portf
#2 Month Avg Debt (for PCR - CASH 1 or PCR - CASH 2) Jan 2014 only
#DM (Nov 18, 2015): Exception for PCR - CASH 1 and PCR - CASH 2 to pull data differently in Dec 2013 due to how data is stored in for PCR - CASH accounts
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Debt','Entity':{'P3','WU'},'Organizational Unit PCR':{'PCR - CASH 1', 'PCR - CASH 2'},'00','Datasource':'Allocation Calculation','201401','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'InfoLease Allocation Sources', !Version, !Time Period, 'All Currencies', 'USD')+
	DB('PCR', 'TOTDEBT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2;
#2 Month Avg Debt (for PCR - CASH 1 or PCR - CASH 2)
#DM (Nov 18, 2015): Exception for PCR - CASH accounts to pull only InfoLease Allocation Sources as opposed to All Datasources
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Debt','Entity':{'P3','WU'},'Organizational Unit PCR':{'PCR - CASH 1', 'PCR - CASH 2'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'InfoLease Allocation Sources', !Version, !Time Period, 'All Currencies', 'USD')+
	DB('PCR', 'TOTDEBT', !Entity, !Organizational Unit PCR, 'All Program Types', 'InfoLease Allocation Sources', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2;
#2 Month Avg Debt
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Debt','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, !Time Period, 'All Currencies', 'USD')+
	DB('PCR', 'TOTDEBT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2;
#2 Month Avg Debt After First Round (for PCR - CASH 1 or PCR - CASH 2) Jan 2014 only
#DM (Nov 18, 2015): Exception for PCR - CASH 1 and PCR - CASH 2 to pull data differently in Dec 2013 due to how data is stored in for PCR - CASH accounts
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Debt After First Round','Entity':{'P3','WU'},'Organizational Unit PCR':{'PCR - CASH 1', 'PCR - CASH 2'},'00','Datasource':'Allocation Calculation','201401','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'InfoLease Allocation Sources', !Version, !Time Period, 'All Currencies', 'USD')+
	DB('PCR', 'TOTDEBT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2;
#2 Month Avg Debt After First Round (for PCR - CASH 1 or PCR - CASH 2)
#DM (Nov 18, 2015): Exception for PCR - CASH accounts to pull only InfoLease Allocation Sources as opposed to All Datasources
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Debt After First Round','Entity':{'P3','WU'},'Organizational Unit PCR':{'PCR - CASH 1', 'PCR - CASH 2'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'InfoLease Allocation Sources', !Version, !Time Period, 'All Currencies', 'USD')+
	DB('PCR', 'TOTDEBT', !Entity, !Organizational Unit PCR, 'All Program Types', 'InfoLease Allocation Sources', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2;
#2 Month Avg Debt After First Round
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Debt After First Round','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, !Time Period, 'All Currencies', 'USD')+
	DB('PCR', 'TOTDEBT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2;
#2 Month Avg Portfolio Fixed
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Portfolio Fixed','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, 'Fixed Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	+ DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, 'Fixed Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	/2
	+ DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, '00', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	*  DB('PCR', '2 Month Avg Fixed %', !Entity, !Organizational Unit PCR, '00', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD');
#2 Month Avg Portfolio Floating
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Portfolio Floating','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, 'Floating Rate', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	+ DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, 'Floating Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'),'All Currencies', 'USD'))
	/2
	+ DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, '00', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	*  DB('PCR', '2 Month Avg Floating %', !Entity, !Organizational Unit PCR, '00', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD');
#2 Month Avg Fixed %
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Fixed %','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	   ((DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Fixed Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	   + DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Fixed Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	   /2) \
	   ((DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Fixed Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	   + DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Fixed Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	   /2 +
	   (DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Floating Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	   + DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Floating Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD
'))
	   /2 );
#2 Month Avg Floating %
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Floating %','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	   ((DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Floating Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	   + DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Floating Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD
'))
	   /2)
	\
	   ((DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Fixed Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	   + DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Fixed Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD'))
	   /2 +
	   (DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Floating Rate', 'All Datasources', !Version,!TimePeriod,'All Currencies', 'USD')
	   + DB('PCR', 'Total Portfolio', !Entity, ATTRS ( 'Organizational Unit PCR', !Organizational Unit PCR, '1st Org Unit Parent'), 'Floating Rate', 'All Datasources', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'), 'All Currencies', 'USD
'))
	   /2 );
#xCOUP_RATE_FIX
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'xCOUP_RATE_FIX','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR', '2 Month Avg Fixed %', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'USD','Transaction Currency')
	*(DB('PCR Inputs', !Account PCR,'P3','00000-P3', !Version,!Time Period)+ DB('PCR Inputs', 'xCOMM_FEES','P3','00000-P3', !Version,!Time Period));
#xCOUP_RATE_FLT
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'xCOUP_RATE_FLT','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR', '2 Month Avg Floating %', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'USD','Transaction Currency')*(
	DB('PCR Inputs', !Account PCR,'P3','00000-P3', !Version,!Time Period)
	+ DB('PCR Inputs', 'xCOMM_FEES','P3','00000-P3', !Version,!Time Period));
#xHQ_RATE_FIX
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'xHQ_RATE_FIX','Entity':'P3','Organizational Unit PCR':'00000-P3','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR Inputs', !Account PCR,!Entity,!Organizational Unit PCR, !Version,!Time Period);
#xHQ_RATE_FLT
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'xHQ_RATE_FLT','Entity':'P3','Organizational Unit PCR':'00000-P3','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR Inputs', !Account PCR,!Entity,!Organizational Unit PCR, !Version,!Time Period);
#2 Month Avg Int Expense
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Int Expense','Entity':{'P3','WU'},'Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'INTEXPENSE', !Entity, !Organizational Unit PCR, !Program Type, 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	+ DB('PCR', 'INTEXPENSE', !Entity, !Organizational Unit PCR, !Program Type, 'All Datasources', !Version,ATTRS('Time Period',!Time Period,'Prior Calendar Period'),'All Currencies', 'USD') )
     /2;
#2 Month Avg Portfolio
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Portfolio','Entity':{'P3','WU'},'Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	(DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, !Program Type, 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	+ DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, !Program Type, 'All Datasources', !Version,ATTRS('Time Period',!Time Period,'Prior Calendar Period'),'All Currencies', 'USD') )
     /2;
#endregion

#Debt Rate
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Debt Rate','Entity':'P3','PCR - CASH 1','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR Inputs', 'Debt Rate PCR Cash',!Entity,!Organizational Unit PCR, !Version,!Time Period);

#DM (Nov 18, 2015): Added to force the debt rate to 0 for the unassigned Org Units
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Debt Rate',{'00000-P3','00000-WU','001_00000','002_00000','06000-P3','21600-P3','001_21600'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N: 0;

[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Debt Rate','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	IF ( ELISANC ( 'Organizational Unit PCR', 'PCR- Debt Rate Calculation', !Organizational Unit PCR ) > 0 & !Entity @= 'P3' ,
		( DB('PCR Inputs', 'xCOUP_RATE_FIX',!Entity,'00000-P3', !Version,!Time Period)
		  + DB('PCR Inputs', 'xCOMM_FEES',!Entity,'00000-P3', !Version,!Time Period))
		*DB('PCR Inputs', 'xHQ_RATE_FIX',!Entity,'00000-P3', !Version,!Time Period)
		+ (DB('PCR Inputs', 'xCOUP_RATE_FLT',!Entity,'00000-P3', !Version,!Time Period)
		  + DB('PCR Inputs', 'xCOMM_FEES',!Entity, '00000-P3', !Version,!Time Period))
		*DB('PCR Inputs', 'xHQ_RATE_FLT',!Entity,'00000-P3', !Version,!Time Period)
		,
		DB('PCR', 'xCOUP_RATE_FIX', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'USD','Transaction Currency')
		+DB('PCR', 'xCOUP_RATE_FLT', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'USD','Transaction Currency'));
#Calculated Interest Expense
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Interest Expense','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
#DM (Nov 14, 2015): Forced Debt rate to look at Org Unit assigned to Entity instead of entity of the intersection (ex. P3-11 Org Unit will look at debt rate of P3 when in Entity WU)
#	DB('PCR', 'Debt Rate', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	DB('PCR', 'Debt Rate', ATTRS('Organizational Unit PCR', !Organizational Unit PCR, 'Entity'), !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	*DB('PCR', '2 Month Avg Debt', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	*(-1)
	/12;
#Calculated Interest Expense 2nd Round
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Interest Expense 2nd Round','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'] = N:
#DM (Nov 14, 2015): Forced Debt rate to look at Org Unit assigned to Entity instead of entity of the intersection (ex. P3-11 Org Unit will look at debt rate of P3 when in Entity WU)
#	DB('PCR', 'Debt Rate', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	DB('PCR', 'Debt Rate', ATTRS('Organizational Unit PCR', !Organizational Unit PCR, 'Entity'), !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	*DB('PCR', '2 Month Avg Debt After First Round', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD')
	*(-1)
	/12;
#Actual to Calculated Interest Expense Variance
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Actual to Calculated Interest Expense Variance','Entity':'P3','00000-P3','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'] = N:
#DM (Nov 13, 2015): Exclude allocations from INTEXPENSE value
#	DB('PCR', 'INTEXPENSE', 'P3 and WU', 'FPD', 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	DB('PCR', 'INTEXPENSE', 'P3 and WU', 'FPD', 'All Program Types', 'All Infolease Datasources without Allocations', !Version,!Time Period,'All Currencies', 'USD')
	-DB('PCR', 'Calculated Interest Expense', 'P3 and WU', 'FPD', '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD');
#Actual to Calculated Interest Expense Variance 2nd Round
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Actual to Calculated Interest Expense Variance 2nd Round','Entity':'P3','00000-P3','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
#DM (Nov 13, 2015): Exclude allocations from INTEXPENSE value
#	DB('PCR', 'INTEXPENSE', 'P3 and WU', 'FPD', 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
	DB('PCR', 'INTEXPENSE', 'P3 and WU', 'FPD', 'All Program Types', 'All Infolease Datasources without Allocations', !Version,!Time Period,'All Currencies', 'USD')
	-DB('PCR', 'Calculated Interest Expense 2nd Round', 'P3 and WU', 'FPD', '00', 'Allocation Calculation', !Version,!Time Period,'All Currencies', 'USD');
#Calculated Interest Expense Adjustment
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Interest Expense Adjustment','Entity':'P3','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
#DM (Nov 13, 2015): Exclude allocations from INTEXPENSE value
#DM (Nov 18, 2015): Force 00000-P3 to pull full data from Source Systems to eliminate total INTEXPENSE through allocations as it was leaving residual in calculations
#	(DB('PCR', 'INTEXPENSE', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
IF(!Organizational Unit PCR @= '00000-P3',
	(DB('PCR', 'INTEXPENSE', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'Source Systems', !Version,!Time Period,'All Currencies', 'USD'))
	* -1,
	(DB('PCR', 'INTEXPENSE', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Infolease Datasources without Allocations', !Version,!Time Period,'All Currencies', 'USD')
	-DB('PCR', 'First Interest Expense Allocation', 'P3 and WU', !Organizational Unit PCR, '00', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD'))
	* -1
)
;
#Calculated Interest Expense Adjustment 2nd Round
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Interest Expense Adjustment 2nd Round','Entity':'P3','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
#DM (Nov 13, 2015): Modified datasouce from All datasources to All Infolease Datasources without Allocations
#DM (Nov 18, 2015): Force 00000-P3 to pull full data from Source Systems to eliminate total INTEXPENSE through allocations as it was leaving residual in calculations
#	(DB('PCR', 'INTEXPENSE', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD')
IF(!Organizational Unit PCR @= '00000-P3',
	(DB('PCR', 'INTEXPENSE', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'Source Systems', !Version,!Time Period,'All Currencies', 'USD'))
	* -1,
	(DB('PCR', 'INTEXPENSE', 'P3 and WU', !Organizational Unit PCR, 'All Program Types', 'All Infolease Datasources without Allocations ', !Version,!Time Period,'All Currencies', 'USD')
	-DB('PCR', 'Second Interest Expense Allocation', 'P3 and WU', !Organizational Unit PCR, '00', 'All Datasources', !Version,!Time Period,'All Currencies', 'USD'))
	* -1
)
;
#endregion

#region Calculated Legal Tax rate
#[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Legal Tax Rate','GLS LE - CIF', 'All Program Types', 'GLS',
#{'201401','201402','201403','201404','201405','201406','201407','201408','201409','201410','201411','201412'},'Transaction Currency PCR':'All Currencies','Currency PCR':'USD'] = C: .0038;
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Legal Tax Rate','GLS LE - CIF', 'All Program Types', 'GLS','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'] = C: .35;
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Legal Tax Rate','FPD', 'All Program Types', 'GLS','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'] = C:
	-1 *(DB('PCR', 'TOTTAX', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR)
	\ DB('PCR', 'PLBEFORETAX', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period |'YTD', !Transaction Currency PCR, !Currency PCR));

[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Legal Tax Rate']= C: 0;
#endregion
#region Calculated Tax Expense
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Tax Expense on Derivatives','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']=N:
	IF ( ELISANC ( 'Organizational Unit PCR', 'GLS LE - CIF', !Organizational Unit PCR ) > 0 ,
		if (SUBST(!Time Period,5,2) @= '01',
			(DB('PCR', 'GLFROMINTRT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, !Time Period, 'All Currencies','USD')
			+ DB('PCR', 'FWDPOINTUNRL', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, !Time Period,'All Currencies','USD'))
			* DB('PCR', 'Calculated Legal Tax Rate', !Entity, 'GLS LE - CIF', 'All Program Types', 'GLS', !Version, !Time Period,'All Currencies','USD'),
			((DB('PCR', 'GLFROMINTRT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, !Time Period | ' YTD', 'All Currencies','USD')
			+ DB('PCR', 'FWDPOINTUNRL', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources', !Version, !Time Period | ' YTD','All Currencies','USD'))
			* DB('PCR', 'Calculated Legal Tax Rate', !Entity, 'GLS LE - CIF', 'All Program Types', 'GLS', !Version, !Time Period,'All Currencies','USD'))
			- DB('PCR', 'Calculated Tax Expense on Derivatives', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period') | 'YTD','All Currencies','USD')),
		if (SUBST(!Time Period,5,2) @= '01',
			(DB('PCR', 'GLFROMINTRT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All GLS Datasources', !Version, !Time Period, 'All Currencies','USD')
			+ DB('PCR', 'FWDPOINTUNRL', !Entity, !Organizational Unit PCR, 'All Program Types', 'All GLS Datasources', !Version, !Time Period,'All Currencies','USD'))
			* DB('PCR', 'Calculated Legal Tax Rate', !Entity, 'FPD', 'All Program Types', 'GLS', !Version, !Time Period,'All Currencies','USD'),
			((DB('PCR', 'GLFROMINTRT', !Entity, !Organizational Unit PCR, 'All Program Types', 'All GLS Datasources', !Version, !Time Period | ' YTD', 'All Currencies','USD')
			+ DB('PCR', 'FWDPOINTUNRL', !Entity, !Organizational Unit PCR, 'All Program Types', 'All GLS Datasources', !Version, !Time Period | ' YTD','All Currencies','USD'))
			* DB('PCR', 'Calculated Legal Tax Rate', !Entity, 'FPD', 'All Program Types', 'GLS', !Version, !Time Period,'All Currencies','USD'))
			- DB('PCR', 'Calculated Tax Expense on Derivatives', !Entity, !Organizational Unit PCR, '00', 'Allocation Calculation', !Version, attrs('Time Period',!Time Period,'Prior Calendar Period') | 'YTD','All Currencies','USD')));
#endregion

#region federal Income Tax P3
#FedIncTaxRate
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Federal Tax Rate','Entity':'P3','00','00000-P3','Datasource':'Input','Transaction Currency PCR':'USD','Transaction Currency']= N:
	DB('PCR Inputs', 'Federal Tax Rate',!Entity,!Organizational Unit PCR, !Version,SUBST(!Time Period,1,4) | '12');
#xPermTax Calculated for 'PCR - Tax'
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Federal Tax','Entity':{'P3','WU'},'PCR - Tax','Transaction Currency PCR':'USD','Transaction Currency']= N: STET;
#xPermTax Calculated for others
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Calculated Federal Tax','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency']= N:
	- DB('PCR', 'Federal Tax Rate', 'P3', '00000-P3', '00', 'Input', !Version,!Time Period,'USD','Transaction Currency')
	*(   DB ('PCR', 'PLBEFORETAX', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources with Allocation Calculation', !Version,!Time Period ,'All Currencies','USD')
	   - DB ('PCR', 'MUNICIPSALES', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources with Allocation Calculation', !Version,!Time Period ,'All Currencies','USD'));
#endregion

#region AFR
#region AFR Pt I
['Weighted AVG Rate for AFR','Entity':{'P3','WU'}] = C:0;
['Weighted AVG Rate for AFR'] = C:
	DB( 'PCR Inputs', 'Weighted AVG Rate for AFR', !Entity, !Organizational Unit PCR, !Version, !Time Period);
['2 Month AVG Payables Balance','Entity':{'P3','WU'},'00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:0;
['2 Month AVG Payables Balance','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
		(['G00010P300','All Program Types','GLS','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
		-  DB('PCR Inputs', 'Adjustment to Payables Balance G00010P300',!Entity,!Organizational Unit PCR, !Version, !Time Period )
		+ DB('PCR','G00010P300', !Entity, !Organizational Unit PCR,'All Program Types','GLS', !Version,ATTRS ('Time Period',!Time Period,'Prior Calendar Period'),'All Currencies','USD')
		-  DB('PCR Inputs', 'Adjustment to Payables Balance G00010P300',!Entity,!Organizational Unit PCR, !Version, ATTRS ('Time Period',!Time Period,'Prior Calendar Period')))
		/ 2;
['Interest Expense AFR (Pt I) for Allocation','Entity':{'P3','WU'},'00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N: 0;
['Interest Expense AFR (Pt I) for Allocation','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	IF ( ELISANC ( 'Entity', 'CIF', !Entity ) > 0 ,
		( DB('PCR Inputs', 'xLoan Balance for AFR Floating',!Entity,!Organizational Unit PCR, !Version, !Time Period )
		* ( DB('PCR Inputs', 'xCOUP_RATE_FLT','GV','00000-GV', !Version, !Time Period )
		     + DB('PCR Inputs', 'xCOMM_FEES','GV','00000-GV', !Version, !Time Period ) )
		+ DB('PCR Inputs', 'xLoan Balance for AFR Fixed',!Entity,!Organizational Unit PCR, !Version, !Time Period )
		* ( DB('PCR Inputs', 'xCOUP_RATE_FIX','GV','00000-GV', !Version, !Time Period )
		     + DB('PCR Inputs', 'xCOMM_FEES','GV','00000-GV', !Version, !Time Period ) ) )
		  / 12 ,
		(['2 Month AVG Payables Balance Stored','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
		* ['Weighted AVG Rate for AFR','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'USD']
		* (-1) / 12 )
		- ['S1751103P3','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']);
#endregion
#region AFR Pt II.
['Interest Expense Calculated (% of Total)','Entity':{'P3','WU'},'00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:0;
['Interest Expense Calculated (% of Total)','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	IF ( ELISANC ( 'Entity', 'CIF', !Entity ) > 0 ,
		(['Interest Expense Allocation AFR (Pt I)','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'])
		\ ROUND ( ['Interest ExpenseAllocation AFR (Pt I)','Entity':'CIF','CFSC','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']),
		(['Interest Expense Allocation AFR (Pt I)','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'])
		\ ROUND(['Interest Expense Allocation AFR (Pt I)','P0G without CIF','CFSC','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']));
['Interest Expense Delta to Total','Entity':'P3','Organizational Unit PCR':'Not Applicable','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	['INTEXPENSE','P3 and WU','PCR - INTERCO','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
	-  ['Interest Expense Allocation AFR (Pt I)','Entity':'P0G without CIF','CFSC','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
	-  ['Interest Expense AFR Assigned','Entity':'P0G without CIF','CFSC','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'];
['Interest Expense Delta to Total','Entity':'GV','Organizational Unit PCR':'Not Applicable','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	['TOTINTEXP','GV','PCR - CIF INTERCO','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
	- ['Interest Expense Allocation AFR (Pt I)','Entity':'CIF','CFSC','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
	- ['Interest Expense AFR Assigned','Entity':'CIF','CFSC','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'];
['Interest Expense AFR (Pt II) for Allocation','Entity':{'P3','WU'},'00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:0;
['Interest Expense AFR (Pt II) for Allocation','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	IF ( ELISANC ( 'Entity', 'CIF', !Entity ) > 0 ,
		['Interest Expense Calculated (% of Total)','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'USD']
		* ['Interest Expense Delta to Total Stored','Entity':'GV','Organizational Unit PCR':'Not Applicable','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
		- ['S17510GV00','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
		- ['S17510GV05','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'],
		['Interest Expense Calculated (% of Total)','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'USD']
		* ['Interest Expense Delta to Total Stored','Entity':'P3','Organizational Unit PCR':'Not Applicable','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
		- ['S17510P300','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']);
#endregion
#region Tax Impact
['Interest Expense AFR - Tax Impact Calculation','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	IF ( ELISANC ( 'Entity', 'CIF', !Entity ) > 0 ,
		['Interest Expense Allocation AFR','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'] * (-1)
		* DB('PCR Inputs', 'Federal Tax Rate','P3','00000-P3',!Version,SUBST (!Time Period,1,4) | '12'),
		 ['Interest Expense Allocation AFR','All Program Types','All Datasources','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'] * (-1)
		* DB('PCR Inputs', 'Federal Tax Rate','P3','00000-P3',!Version,SUBST (!Time Period,1,4) | '12'));
#endregion
#endregion

#region Debt Normalization
['Avg YTD Debt','00','Stat Account & Metrics Calculations',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency']=N:
	(DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources including PCA', !Version,!Time Period ,'All Currencies', 'USD')
	+ DB('PCR', 'TOTDEBT',!Entity, !Organizational Unit PCR,'All Program Types', 'All Datasources including PCA', !Version,attrs('Time Period',!Time Period,'Prior Calendar Period'),'All Currencies', 'USD') )
	/2;

['Interest Expense as a % of Avg YTD Debt'] = C: 0;
[{'Normalized Debt (Calc)','Normalized Equity (Calc)'},'Entity':'Normalization','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	IF ( ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'Normalization Level') @= 'Y' ,
		(DB('PCR', 'TOTDEBT','LE.2020-12.P0G', ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'1st Org Unit Parent'), 'All Program Types', 'All Datasources including PCA', !Version,!Time Period ,'All Currencies', 'USD')
		+ DB('PCR', 'TOTEQUITY','LE.2020-12.P0G',ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'1st Org Unit Parent'),'All Program Types', 'All Datasources including PCA', !Version,!Time Period,'All Currencies', 'USD') )
		/ 9
		* IF ( !Account PCR @= 'Normalized Debt (Calc)', 8, 1 ),
	0);
['Debt Normalization Calculation','Entity':'Normalization','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] =N:
	IF ( ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'Normalization Level') @= 'Y' ,
		DB('PCR', 'Normalized Debt (Calc)',!Entity, !Organizational Unit PCR,'All Program Types', 'All Datasources including PCA', !Version,!Time Period ,'All Currencies', 'USD')
		- DB('PCR', 'TOTDEBT','LE.2020-12.P0G',ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'1st Org Unit Parent'),'All Program Types', 'All Datasources including PCA', !Version,!Time Period,'All Currencies', 'USD') ,
		0);
['Equity Normalization Calculation','Entity':'Normalization','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency']= N:
	IF ( ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'Normalization Level') @= 'Y' ,
		DB('PCR', 'Normalized Equity (Calc)',!Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources including PCA', !Version,!Time Period ,'All Currencies', 'USD')
		- DB('PCR', 'TOTEQUITY','LE.2020-12.P0G',ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'1st Org Unit Parent'),'All Program Types', 'All Datasources including PCA', !Version,!Time Period,'All Currencies', 'USD') ,
		0);
['Interest Expense Debt Normalization - Calculation','Entity':'Normalization','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	['Debt Normalization Calculation','Transaction Currency PCR':'All Currencies','Currency PCR':'USD']
	* ['Interest Expense as a % of Avg YTD Debt','Transaction Currency PCR':'USD','Currency PCR':'USD']
	/ 12;
['Interest Expense Debt Normalization - Tax Impact Calculation','Entity':'Normalization','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	['Interest Expense Debt Normalization - Calculation','Transaction Currency PCR':'All Currencies','Currency PCR':'USD'] * (-1)
	* DB('PCR','CALCULATED TAX %', 'LE.2020-12.P0G', ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'1st Org Unit Parent'),'All Program Types', 'All Datasources with PCA without Normalization', !Version, !Time Period, !Transaction Currency PCR, !Currency PCR);
#endregion

#region Allocate Cash based on % of Portfolio Opening Balance: calculate Portfolio Opening Balance
['Portfolio Opening Balance','00','Allocation Calculation',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'] = N:
	DB('PCR', 'Total Portfolio', !Entity, !Organizational Unit PCR, 'All Program Types', 'All Datasources including PCA', !Version,STR ( NUMBR ( SUBST ( !Time Period,1,4))-1,4,0) | '12','All Currencies','USD');
#endregion

#region Key Measures
##QUEBIT RULE CHANGE - Changed on 4/7/2017
['AVG Gross Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['Gross Portfolio', 'All Program Types']
	+ DB( 'PCR', 'Gross Portfolio', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	\ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD Avg Gross Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Gross Portfolio YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'Gross Portfolio', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Changes for calculations 10/26/2016; Gavin Driskell
['AVG Total Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['Total Portfolio for Key Measures', 'All Program Types']
	+ DB( 'PCR', 'Total Portfolio for Key Measures', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
## CHECK ON TOTAL PORTFOLIO YTD for AVG calc FOR KEY MEASURES CALCULATION
['YTD AVG Total Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Total Portfolio YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'Total Portfolio for Key Measures', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );
#End Changes for 10/26/2016

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['AVG Retail Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['Retail Portfolio', 'All Program Types']
	+ DB( 'PCR', 'Retail Portfolio', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD AVG Retail Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Retail Portfolio YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'Retail Portfolio', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );

#Changes for calculations 10/26/2016; Gavin Driskell

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Changes for calculations 10/26/2016; Gavin Driskell
['AVG Wholesale Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['Wholesale Portfolio for Key Measures', 'All Program Types']
	+ DB( 'PCR', 'Wholesale Portfolio for Key Measures', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD AVG Wholesale Portfolio', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Wholesale Portfolio YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'Wholesale Portfolio for Key Measures', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );
#End Changes for 10/26/2016



# Jayson C. indicated the Write-Offs - Net calc wasn't working correctly. Commented out 9/28/16 by Gavin D.
#['WRITE-OFFS - NET','00','Key Measures Calculation',{'Actual','Plan','Act @ Prior Month Rate','Act @ BP Rate','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Currency PCR':'Transaction Currency']=N:
#	if (   (abs((DB('GLS Reporting', 'SALLOWANCE220 - ALLOW - STAT / GWO', !Entity, SUBST(!Organizational Unit PCR,1,5), !Version, !Time Period, !Transaction Currency PCR)
#		+DB('GLS Reporting', 'SALLOWANCE230 - ALLOW - STAT / REC', !Entity, SUBST(!Organizational Unit PCR,1,5), !Version, !Time Period, !Transaction Currency PCR)))>0
#		& !Entity @= SUBST(!Organizational Unit PCR,7,2)),
#		DB('GLS Reporting', 'SALLOWANCE220 - ALLOW - STAT / GWO', !Entity, SUBST(!Organizational Unit PCR,1,5), !Version, !Time Period, !Transaction Currency PCR)
#		+DB('GLS Reporting', 'SALLOWANCE230 - ALLOW - STAT / REC', !Entity, SUBST(!Organizational Unit PCR,1,5), !Version, !Time Period, !Transaction Currency PCR),STET);

### Begin new Rate Volume calcs added 9/28/16 by Gavin D.

['MTD Net Portfolio Revenue at Plan Revenue Yield - Volume','Act vs Plan'] = C:
	(['Average Gross Portfolio','Act vs Plan','Key Measures Calculation']
            * ['Net Revenue as % of Avg Gross Portfolio','Plan','Entity':'Business Plan'])
             \ 12 ;

#changed 9/26/16, Gavin D.
['MTD Net Portfolio Revenue at change in Revenue Yield - Rate','Act vs Plan'] = C:
	(['Net Revenue as % of Avg Gross Portfolio','Act vs Plan']
	* ['Average Gross Portfolio','Actual','Key Measures Calculation'])
#             * ['Average Gross Portfolio','Plan','Entity':'Business Plan','Key Measures Calculation'])
              \ 12 ;

['MTD Total change in Net Portfolio Value','Act vs Plan'] = C:
	   ['MTD Net Portfolio Revenue at Plan Revenue Yield - Volume','Act vs Plan']
	+ ['MTD Net Portfolio Revenue at change in Revenue Yield - Rate','Act vs Plan'];

['MTD Interest Expense at Plan Interest Yield - Volume','Act vs Plan'] = C:
	(['Average Gross Portfolio','Act vs Plan']
            * -['INTEREST AS % OF AVG GROSS PORTFOLIO','Plan'])
             \ 12 ;

#changed 'Plan' to 'Actual' for Average Gross Portfolio - 9/26/16, Gavin D.
['MTD INTEREST EXPENSE AT CHANGE IN INTEREST YIELD - Rate','Act vs Plan'] = C:
	(['Average Gross Portfolio','Actual']
            * -['INTEREST AS % OF AVG GROSS PORTFOLIO','Act vs Plan'])
             \ 12 ;

['MTD TOTAL CHANGE IN INTEREST EXPENSE','Act vs Plan'] = C:
	   ['MTD Interest Expense at Plan Interest Yield - Volume','Act vs Plan']
	+ ['MTD INTEREST EXPENSE AT CHANGE IN INTEREST YIELD - Rate','Act vs Plan'];

['MTD DIFF IN MARGIN DUE TO CHANGE IN VOLUME', 'Act vs Plan'] = C:
	   ['MTD Net Portfolio Revenue at Plan Revenue Yield - Volume','Act vs Plan']
	+ ['MTD Interest Expense at Plan Interest Yield - Volume','Act vs Plan'] ;

['MTD DIFF IN MARGIN DUE TO CHANGE IN RATE', 'Act vs Plan'] = C:
	   ['MTD Net Portfolio Revenue at change in Revenue Yield - Rate','Act vs Plan']
	+ ['MTD INTEREST EXPENSE AT CHANGE IN INTEREST YIELD - Rate','Act vs Plan'] ;

['MTD TOTAL CHANGE IN MARGIN DUE TO VOLUME AND RATE', 'Act vs Plan'] = C:
	    ['MTD DIFF IN MARGIN DUE TO CHANGE IN VOLUME', 'Act vs Plan']
                + ['MTD DIFF IN MARGIN DUE TO CHANGE IN RATE', 'Act vs Plan'] ;

['YTD Net Portfolio Revenue at Plan Revenue Yield - Volume','Act vs Plan'] = C:
	(['YTD Average Gross Portfolio','Act vs Plan']
            * ['Net Revenue as % of Avg YTD Gross Portfolio','Plan'])
             \ 12 * ELCOMPN('Time Period', !Time Period | 'YTD') ;

#changed 'Plan' to 'Actual' for Average Gross Portfolio - 9/26/16, Gavin D.
['YTD Net Portfolio Revenue at Change in Revenue Yield - Rate','Act vs Plan'] = C:
	(['Net Revenue as % of Avg YTD Gross Portfolio','Act vs Plan']
             * ['YTD Average Gross Portfolio','Actual'])
              \ 12 * ELCOMPN('Time Period', !Time Period | 'YTD') ;

['YTD TOTAL CHANGE IN NET PORTFOLIO VALUE','Act vs Plan'] = C:
	  ['YTD Net Portfolio Revenue at Plan Revenue Yield - Volume','Act vs Plan']
	+ ['YTD Net Portfolio Revenue at Change in Revenue Yield - Rate','Act vs Plan'] ;

['YTD Interest Expense at Plan Interest Yield - Volume','Act vs Plan'] = C:
	(['YTD Average Gross Portfolio','Act vs Plan']
            * -['INTEREST AS % OF AVG YTD GROSS PORTFOLIO','Plan'])
             \ 12 * ELCOMPN('Time Period', !Time Period | 'YTD') ;

#changed 'Plan' to 'Actual' for Average Gross Portfolio - 9/26/16, Gavin D.
['YTD INTEREST EXPENSE AT CHANGE IN INTEREST YIELD - Rate','Act vs Plan'] = C:
	(['YTD Average Gross Portfolio','Actual']
            * -['INTEREST AS % OF AVG YTD GROSS PORTFOLIO','Act vs Plan'])
             \ 12 * ELCOMPN('Time Period', !Time Period | 'YTD') ;

['YTD TOTAL CHANGE IN INTEREST EXPENSE','Act vs Plan'] = C:
	  ['YTD Interest Expense at Plan Interest Yield - Volume','Act vs Plan']
	+ ['YTD INTEREST EXPENSE AT CHANGE IN INTEREST YIELD - Rate','Act vs Plan'];

#Calculation Change 10/26/2016; Gavin Driskell
['YTD DIFF IN MARGIN DUE TO CHANGE IN VOLUME','Act vs Plan'] = C:
	  ['YTD Net Portfolio Revenue at Plan Revenue Yield - Volume','Act vs Plan']
	+ ['YTD Interest Expense at Plan Interest Yield - Volume','Act vs Plan'];

['YTD DIFF IN MARGIN DUE TO CHANGE IN RATE','Act vs Plan'] = C:
	  ['YTD Net Portfolio Revenue at Change in Revenue Yield - Rate','Act vs Plan']
	+ ['YTD INTEREST EXPENSE AT CHANGE IN INTEREST YIELD - Rate','Act vs Plan'];

#End of Calculation Change 10/26/2016

['YTD TOTAL CHANGE IN MARGIN DUE TO VOLUME AND RATE','Act vs Plan'] = C:
	  ['YTD DIFF IN MARGIN DUE TO CHANGE IN VOLUME','Act vs Plan']
	+ ['YTD DIFF IN MARGIN DUE TO CHANGE IN RATE','Act vs Plan'];

['YTD ANNUALIZED CFSC REVENUE - EXTERNAL MARGIN'] = C: ['YTD CFSC Revenue - Margin'] * 12
	\ ELCOMPN('Time Period', !Time Period | 'YTD') ;

['YTD ANNUALIZED CFSC INTEREST EXPENSE - MARGIN'] = C: ['YTD CFSC Interest Expense - Margin (Includes Points on Forward)'] * 12
	\ ELCOMPN('Time Period', !Time Period | 'YTD') ;

['YTD ANNUALIZED CFSC MARGIN DOLLARS'] = C: ['YTD ANNUALIZED CFSC REVENUE - EXTERNAL MARGIN']
	+ ['YTD ANNUALIZED CFSC INTEREST EXPENSE - MARGIN'] ;

['AVERAGE DEBT AS A % OF AVERAGE GROSS PORTFOLIO',{'Actual','Plan'}] = C:
	- ['Average Debt'] \ ['AVERAGE GROSS PORTFOLIO'] ;

['YTD AVERAGE DEBT AS A % OF AVERAGE GROSS PORTFOLIO',{'Actual','Plan'}] = C:
	- ['YTD Average Debt'] \ ['YTD AVERAGE GROSS PORTFOLIO'] ;

#End new Rate Volume calcs added 9/23/16 by Gavin D.

#Moved 9/28/16 by Gavin D. to allow the newly added Rate Volume calcs to fire.
['Act vs Plan'] = C:
	CONSOLIDATECHILDREN ( 'Version' );

#End of 9/28/16 calculation additions/modifications, Gavin D.

['ALLOWANCE AS A % OF GROSS FINANCE RECEIVABLES']= C:
	(-1) * ['ALLOWANCE'] \ (['NETFINRECV']-['ALLOWANCE']);
['WRITE-OFFS AS A % OF AVERAGE RETAIL PORTFOLIO'] = C:
	['Write-Offs - Net'] \ ['AVG Retail Portfolio'] * 12;
['WRITE-OFFS AS A % OF YTD AVERAGE RETAIL PORTFOLIO'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period ) = 0 ,
		DB('PCR','Write-Offs - Net', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR)
		\  ELCOMPN('Time Period', !Time Period | 'YTD')
		\ DB('PCR','YTD AVG Retail Portfolio', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR)
		* 12,0);

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['AVERAGE ASSETS', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['TOTASSET', 'All Program Types']
	+ DB( 'PCR', 'TOTASSET', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD AVERAGE Assets', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Assets YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'TOTASSET', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' ) + 1 );

['RETURN ON ASSETS (BEFORE TAX)']=C:
	(-1) * ['PLBEFORETAX'] \ ['AVERAGE ASSETS'] *12;

['YTD RETURN ON ASSETS (BEFORE TAX)']=C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
		(-1) * DB('PCR','PLBEFORETAX', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
		\ ['YTD AVERAGE Assets']
		\ ( ELCOMPN('Time Period', !Time Period | 'YTD') ) * 12,
		0);

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['AVERAGE EQUITY (Excluding NCI)', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['TOTEQUITY', 'All Program Types']
	+ DB( 'PCR', 'TOTEQUITY', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD AVERAGE EQUITY (Excluding NCI)', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Equity YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'TOTEQUITY', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );

['RETURN ON EQUITY (AFTER TAX)'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
		#DB('PCR','PLBEFORENCI', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period , !Transaction Currency PCR, !Currency PCR)
		DB('PCR','NETINC', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period , !Transaction Currency PCR, !Currency PCR)
		\ ['AVERAGE EQUITY (Excluding NCI)'] * 12,
		0);

['YTD RETURN ON EQUITY'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
		#DB('PCR', 'PLBEFORENCI', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, SUBST(!Time Period,1,6) | ' YTD', !Transaction Currency PCR, !Currency PCR)
		DB('PCR', 'NETINC', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, SUBST(!Time Period,1,6) | ' YTD', !Transaction Currency PCR, !Currency PCR)
		\ DB('PCR', 'YTD AVERAGE EQUITY (Excluding NCI)', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, SUBST(!Time Period,1,6), !Transaction Currency PCR, !Currency PCR)
		\ ELCOMPN('Time Period', SUBST(!Time Period,1,6) | 'YTD' ) * 12,
		0);

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['AVERAGE DEBT', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['TOTDEBT for Key Measures', 'All Program Types']
	+ DB( 'PCR', 'TOTDEBT for Key Measures', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD AVERAGE DEBT', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Debt YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'TOTDEBT for Key Measures', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );

['DEBT TO EQUITY']=C:
	['TOTDEBT'] \ ['TOTEQUITY'];

['SG&A AS A  %  AVERAGE MANAGED ASSETS'] = C:
	['TOTGENOPADM'] * 12 \ ['AVERAGE MANAGED ASSETS'];

['SG&A AS A  % YTD AVERAGE MANAGED ASSETS'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
		DB('PCR', 'TOTGENOPADM', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
		\ DB('PCR', 'YTD AVERAGE Managed Assets', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, !Currency PCR)
		* 12
		\ ( ELCOMPN('Time Period', !Time Period | ' YTD') )
		, 0);

['SG&A AS A  %  MARGIN $'] = C:
	- (['TOTGENOPADM'] \ ['CFSC MARGIN DOLLARS - EXTERNAL']);

['SG&A AS A  % YTD MARGIN $'] = C:
	- (IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
		DB('PCR', 'TOTGENOPADM', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
		\ DB('PCR', 'CFSC MARGIN DOLLARS - EXTERNAL', !Entity, !Organizational Unit PCR,!Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
		,0));

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['AVERAGE MANAGED ASSETS', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( ['Account PCR':'MANAGED ASSETS', 'All Program Types']
	+ DB( 'PCR', 'MANAGED ASSETS', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Prior Calendar Period' ), !Transaction Currency PCR, !Currency PCR ) )
	/ 2;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['YTD AVERAGE MANAGED ASSETS', '00', {'Actual', 'Plan', 'Act @ Prior Month Rate', 'Act @ BP Rate', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}] = N:
	( DB( 'PCR', 'Managed Assets YTD Total for AVG calc', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR )
	+ DB( 'PCR', 'Managed Assets', !Entity, !Organizational Unit PCR, 'All Program Types', !Datasource, !Version, STR( NUMBR( SUBST( !Time Period, 1, 4 ) ) - 1, 4, 0 ) | '12', !Transaction Currency PCR, !Currency PCR ) )
	\ ( ELCOMPN( 'Time Period', !Time Period | ' YTD' )
	+ 1 );

['MANAGED ASSETS PER EMPLOYEE']=C:
	['Account PCR':'Managed Assets'] \ ['xHeadcount','Transaction Currency PCR':'USD','Currency PCR':'USD'] \ 1000000;

['PROVISION AS A % OF RETAIL NEW BUSINESS'] = C:
	['PROVCREDIT'] \ ['xNB-RETAIL'];

['YTD PROVISION AS A % OF YTD RETAIL NEW BUSINESS']=C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR', 'PROVCREDIT', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period |' YTD', !Transaction Currency PCR, !Currency PCR)
	\ DB('PCR', 'xNB-RETAIL', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period |' YTD', !Transaction Currency PCR, !Currency PCR)
	,0);

['INTEREST AS % OF AVG GROSS PORTFOLIO']= C:
	['CFSC INTEREST EXPENSE - MARGIN (Includes Ptns on Forward)'] * 12 \ ['AVG Gross Portfolio'];

['NET REVENUE AS % OF AVG GROSS PORTFOLIO'] = C:
	- (IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR','CFSC REVENUE - EXTERNAL MARGIN', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, !Currency PCR)
	#* 12 \ ['YTD Avg Gross Portfolio'], 0 );
	* 12 \ ['Avg Gross Portfolio'], 0 ));

['MARGIN AS % OF AVG GROSS PORTFOLIO (EXTERNAL)'] = C:
	['NET REVENUE AS % OF AVG GROSS PORTFOLIO']- ['INTEREST AS % OF AVG GROSS PORTFOLIO'];

['NET REVENUE AS % OF AVG YTD GROSS PORTFOLIO'] = C:
	- (IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR','CFSC REVENUE - EXTERNAL MARGIN', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR)
	\ ( ELCOMPN('Time Period', !Time Period | 'YTD') )
	* 12 \ ['YTD Avg Gross Portfolio'], 0 ));

['INTEREST AS % OF AVG YTD GROSS PORTFOLIO'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR','CFSC INTEREST EXPENSE - MARGIN (Includes Ptns on Forward)', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR)
	\ ( ELCOMPN('Time Period', !Time Period | 'YTD') )
	* 12 \ ['YTD Avg Gross Portfolio'], 0 );

['MARGIN AS % OF AVG YTD GROSS PORTFOLIO (EXTERNAL)'] = C:
	['NET REVENUE AS % OF AVG YTD GROSS PORTFOLIO'] - ['INTEREST AS % OF AVG YTD GROSS PORTFOLIO'];

['NET RETAIL REVENUE AS % OF AVG RETAIL PORTFOLIO']=C:
	['RETAIL REVENUE YIELD'] * 12 \ ['Avg Retail Portfolio'];

['NET RETAIL REVENUE AS % OF AVG YTD RETAIL PORTFOLIO']=C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR','RETAIL REVENUE YIELD', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
	\ ( ELCOMPN('Time Period', !Time Period | 'YTD') )
	* 12 \ ['YTD Avg Retail Portfolio'], 0 );

['WHOLESALE REVENUE AS % OF AVG WHOLESALE PORTFOLIO']= C:
	['Wholesale REVENUE YIELD'] * 12 \ ['Avg Wholesale Portfolio'];

['WHOLESALE REVENUE AS % OF AVG YTD WHOLESALE PORTFOLIO'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR','WHOLESALE REVENUE YIELD', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
	\ ( ELCOMPN('Time Period', !Time Period | 'YTD') )
	* 12 \ ['YTD Avg Wholesale Portfolio'], 0 );

['INTEREST AS % OF AVG DEBT']= C:
	['CFSC INTEREST EXPENSE - MARGIN (Includes Ptns on Forward)'] * 12 \ ((-1)*['AVERAGE Debt']);

['INTEREST AS % OF AVG YTD DEBT']=C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	DB('PCR','CFSC INTEREST EXPENSE - MARGIN (Includes Ptns on Forward)', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
	\ ( ELCOMPN('Time Period', !Time Period | 'YTD') )
	* 12 \ ((-1)*['YTD AVERAGE DEBT']), 0 );

['SPREAD %'] = C:
		['NET REVENUE AS % OF AVG GROSS PORTFOLIO'] - ['INTEREST AS % OF AVG DEBT'];

['YTD SPREAD %'] = C:
	['NET REVENUE AS % OF AVG YTD GROSS PORTFOLIO'] - ['INTEREST AS % OF AVG YTD DEBT'];

#Calculation changes 10/26/2016; Gavin Driskell
['SPREAD % ( Excluding Points On Forward)'] = C:
	['NET REVENUE AS % OF AVG GROSS PORTFOLIO']
	- (
		((['CFSC INTEREST EXPENSE - MARGIN (Includes Ptns on Forward)'] -['FWDPOINTREAL'])
		 * 12)
		\ ((-1)*['AVERAGE DEBT']));

['YTD SPREAD % (excluding Points on Forwards)'] = C:
	  IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	 ['NET REVENUE AS % OF AVG YTD GROSS PORTFOLIO']
	- ((
		(DB('PCR','CFSC INTEREST EXPENSE - MARGIN (Includes Ptns on Forward)', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
		- DB('PCR','FWDPOINTREAL', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR))
		\ ( ELCOMPN('Time Period', !Time Period | 'YTD') )
		* 12)
		\ ((-1)*['YTD AVERAGE DEBT']))
		,0);

#End of Calculation Changes 10/26/2016

['Calculated Tax %'] = C:
	IF ( ELLEV ( 'Time Period', !Time Period )= 0 ,
	#(DB('PCR', 'Accountable Profit', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR)
	#- DB('PCR', 'NETINC', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR))
	#\ DB('PCR', 'Accountable Profit', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
	-(DB('PCR', 'TOTTAX', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR)
	\ DB('PCR', 'PLBEFORETAX', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | 'YTD', !Transaction Currency PCR, !Currency PCR))
	,0);
#endregion

#region NETINC without Interest Exp Allocations Debt Normalization; NETINC with Retained Earnings Alloc Offsets
['NETINC without Interest Exp Allocations Debt Normalization'] = C:
	['NETINC including Offsets for Retained Earnings'] - ['Interest Expense Allocation Debt Normalization'] - ['Interest Expense Allocation Debt Normalization - Tax Impact'];

['NETINC including Offsets for Retained Earnings'] = C:
	['NETINC'] + ['NetInc Offsets for Retained Earnings'] ;
#endregion

#region Retained Earnings YTD balance for each period,

['RETEARNING120',{'Actual','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'}] = N:
		DB('PCR', 'NETINC', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR);

['RETEARNING120',{'Actual','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'}] = C:
	IF (ELLEV('Time Period',!Time Period)=0,
		DB('PCR', 'NETINC', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR),
		CONTINUE);
#endregion

#region for non-gls ans PCA, roll over December RETEARNING into RETEARNINGOB (RETEARNING100) for Jan

#['RETEARNING100',{'201501','201502','201503','201504','201505','201506','201507','201508','201509','201510','201511','201512'},{'Actual','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'}]=
#   IF (SUBST(!Datasource,1,7)@='PCA Out' % SUBST(!Datasource,1,6)@='PCA In',STET,CONTINUE);

['RETEARNING100',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'}] = N:
	IF ( !Datasource @<> 'GLS' & NUMBR ( !Time Period ) > 201412 & ATTRS('Datasource', !Datasource, 'YE RE Rollover') @= 'Y',
		DB('PCR', 'RETEARNING', !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version,STR ( NUMBR ( SUBST ( !Time Period,1,4))-1,4,0) | '12', !Transaction Currency PCR, !Currency PCR),
		CONTINUE);
#endregion

#region Input
[{'xPermTax'},'Currency PCR':'Transaction Currency']= STET;
#region Efficiency and Past Dues
#xPD - CUST RETAIL PORT
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},{'xPD - CUST RETAIL PORT','xPD - CUST RETAIL $','xPD - DLR RETAIL PORT','xPD - DLR WHLS PORT','xPD - DLR WHLS $','xPD - DLR PURCH PORT','xPD - DLR PURCH $','xPD - SYND PORT','xPD - SYND $','xPD - CUST LEASE PORT','xPD - CUST LEASE $','xPD - DLR OP LEASE PORT','xPD - PLUG PORT','xPD - PLUG $','xPD $','xPD - PORTFOLIO'},'Datasource':'Input','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
	if (SUBST(!Organizational Unit PCR,7,2) @= !Entity,
		DB('PCR Inputs', !Account PCR, !Entity,!Organizational Unit PCR, !Version,!Time Period),CONTINUE);


['Past Due %'] = C:
	['xPD $'] \ ['xPD - PORTFOLIO'];
#endregion

#region Managed Assets
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'P3','xMA-SYN','Datasource':'Input','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
		DB('PCR Inputs', !Account PCR,!Entity,!Organizational Unit PCR, !Version,!Time Period);
#endregion

#region BMS
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'P3','xBMS','Organizational Unit PCR':'00000-P3','Datasource':'Input','00','Transaction Currency PCR':'USD','Transaction Currency']=N:
	DB('PCR Inputs', !Account PCR, !Entity,!Organizational Unit PCR, !Version,!Time Period)
	- IF(SUBST(!Time Period,5,2) @= '01',0,DB('PCR Inputs', !Account PCR, !Entity,!Organizational Unit PCR, !Version,ATTRS('Time Period', !Time Period,'Prior Calendar period' )));
#endregion

#region xStock, xDividend, xOBProfitEmployed
##QUEBIT RULE CHANGE - Changed on 5/17/2017
##CHANGE MADE TO USE ALL TIME PERIODS VS. THE FIRST MONTH OF THE YEAR
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Account PCR':{'xOBPortfolio'}, '00', 'Datasource':'Input', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
	DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, !Time Period );

##ORIGINAL RULE FOR xOBPortfolio
#THE LINE DIRECTLY BELOW WAS COMMENTED OUT ORIGINALLY TO EXCLUDE xOBAssets
#[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Account PCR':{'xOBPortfolio','xOBAssets'},'00','Datasource':'Input','Transaction Currency PCR':'USD','Transaction Currency']= N:
#THE REST OF THE CODE BELOW WAS COMMENTED OUT TO REMOVE JANUARY AS THE TIME PERIOD
#[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Account PCR':{'xOBPortfolio'},'00','Datasource':'Input','Transaction Currency PCR':'USD','Transaction Currency']= N:
#	DB('PCR Inputs', !Account PCR,!Entity,!Organizational Unit PCR, !Version,SUBST(!Time Period,1,4) | '01');

##QUEBIT RULE CHANGE - Changed on 5/17/2017
##CHANGE MADE TO USE ALL TIME PERIODS VS. THE FIRST MONTH OF THE YEAR
[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Account PCR':{'xStock', 'xDividend'}, 'Entity':{'P3', 'WU', 'LM'}, '00', 'Datasource':'Input', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
	DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, !Time Period );

##ORIGINAL RULE FOR xStock & xDividend
#[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, 'Account PCR':{'xStock', 'xDividend'}, 'Entity':{'P3', 'WU', 'LM'}, '00', 'Datasource':'Input', 'Transaction Currency PCR':'USD', 'Transaction Currency'] = N:
#	DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, SUBST( !Time Period, 1, 4 ) | '01' );

[{'Actual', 'Plan', 'Forecast', 'What If Scenario 1', 'What If Scenario 2', 'What If Scenario 3'}, '00', 'Datasource':'Input'] = N:
IF( DIMIX( 'Input Accounts', !Account PCR ) > 0,
	IF( ATTRS( 'Input Accounts', !Account PCR, 'Is Non-Currency Input' ) @= 'Y',
		IF( !Transaction Currency PCR @= 'not applicable' & !Currency PCR @= 'Transaction Currency',
			DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, !Time Period ),
			0 ),
		IF( !Transaction Currency PCR @= 'USD' & !Currency PCR @= 'Transaction Currency',
			DB( 'PCR Inputs', !Account PCR, !Entity, !Organizational Unit PCR, !Version, !Time Period ),
			CONTINUE ) ),
	0 );
#endregion

#region: no FX conv for USD GLS (STET GLS datasource for USD and for Transaction Curr = Currency PCR because those Currencies are imported from GLS Reporting Cube)
[{'Actual','Act @ BP Rate','Act vs PY Act FX Var','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Datasource':'GLS','Currency PCR':{'Transaction Currency','USD'}]=N:
	IF ( ELISANC ( 'Account PCR','Controller Hierarchies', !Account PCR ) > 0 , STET, CONTINUE );

[{'Actual','Act @ BP Rate','Act vs PY Act FX Var','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Datasource':'GLS']=N:
	IF ( ELISANC ( 'Account PCR','Controller Hierarchies', !Account PCR ) > 0
		& !Transaction Currency PCR @= !Currency PCR , STET, CONTINUE );
#endregion
#region FX Rate Conversions for PCA and JE Adjustments
# STET Transaction Value
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency'] = N: STET;
#TBD: no FX Conversion for <TBD> (any data like headcount, FTEs, Volumes, ...)
#FX Conv
[{'Actual','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'}]=N:
	IF(!Transaction Currency PCR @= !Currency PCR ,
		DB('PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, 'Transaction Currency'),
		IF ( ATTRS ('Account PCR', !Account PCR, 'Is Balance Sheet Acct')@= 'Y',
          	DB('PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, 'Transaction Currency')
			*DB('FX', !Transaction Currency PCR, !Currency PCR, !Version, !Time Period, 'Actual Rate Balance Sheet'),
          	DB('PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, 'Transaction Currency')
	          *DB('FX', !Transaction Currency PCR, !Currency PCR, !Version, !Time Period, 'Actual Rate PnL')));
['Plan'] = N:
	IF(!Transaction Currency PCR @= !Currency PCR ,
		DB('PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, 'Transaction Currency'),
	DB('PCR', !Account PCR, !Entity, !Organizational Unit PCR, !Program Type, !Datasource, !Version, !Time Period, !Transaction Currency PCR, 'Transaction Currency')
	*DB('FX', !Transaction Currency PCR, !Currency PCR, !Version, !Time Period, 'Business Plan Rate'));
['Act @ BP Rate'] = N:
	['Actual','Transaction Currency'] * DB('FX', !Transaction Currency PCR, !Currency PCR, 'Actual', !Time Period, 'Business Plan Rate');
['Act @ Prior Month Rate'] = N:
	['Actual','Transaction Currency']
	* IF ( ATTRS ('Account PCR', !Account PCR, 'Is Balance Sheet Acct') @= 'Y',
           	 	DB('FX', !Transaction Currency PCR, !Currency PCR, !Version, ATTRS ('Time Period',!Time Period,'Prior Calendar Period'), 'Actual Rate Balance Sheet'),
		DB('FX', !Transaction Currency PCR, !Currency PCR, !Version, ATTRS ('Time Period',!Time Period,'Prior Calendar Period'), 'Actual Rate PnL'));
#endregion
#endregion



FEEDERS;
#region feeders

#region Variances
#['Actual'] => ['Act vs Plan FX Var'],['Act @ BP Rate'],['Act vs PY Act FX Var'],['Act @ Prior Month Rate'];
#endregion

#region FX Feeders

#note: while GLS USD conversions do not have to be fed for regular controller-sourced transaction data,
#the key measures and stat account calcualtions need FX conversions applied too because we only calcuLate N-Level key measures against transaction currency values (for consistency purposes) and to reduce feeding for key measures
#Therefore, rather than writing conditional feeders that will feed GLS transaction data into USD only for stat accounts, we will feed all GLS transactions into all Reporting Currencies
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency'] => ['Currency PCR':'All Currencies'];
#endregion

#region Opening Balance for Leaf Elements
#QUEBIT FEEDERS
## Feeder 1.1 - Opening Balance for Leaf Elements - ADDED 04/04/2017
['ALLOWANCE'] => ['SALLOWANCE200'];
#endregion Opening Balance for Leaf Elements

#region Retained Earnings
['RETEARNINGTOB',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency'] => ['RETEARNING120'];

['NETINC',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency'] =>
	DB('PCR','RETEARNING120',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,SUBST (!Time Period,1,4),!Transaction Currency PCR,!Currency PCR);

['NETINC',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Transaction Currency'] =>
	DB('PCR','RETEARNING120',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,!Time Period | 'YTD',!Transaction Currency PCR,!Currency PCR);

#for non-gls, roll over December RETEARNING into RETEARNINGOB (RETEARNING100) for Jan
['RETEARNING',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Dec Prior Year','Transaction Currency'] =>
#	DB ( 'PCR', 'RETEARNING100', !Entity, !Organizational Unit PCR,!Program Type,!Datasource,!Version,STR ( NUMBR ( SUBST ( ELCOMP ( 'Time Period', 'Dec Prior Year', 1 ) ,1,4))+1,4,0),!Transaction Currency PCR, !Currency PCR);
	DB ( 'PCR', 'RETEARNING100', !Entity, !Organizational Unit PCR,!Program Type,!Datasource,!Version,'2017',!Transaction Currency PCR, !Currency PCR);

#['RETEARNING',{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},{'PCA In','PCA Out'},'201412','Transaction Currency'] =>
#	DB ( 'PCR', 'RETEARNING100', !Entity, !Organizational Unit PCR,!Program Type,!Datasource,!Version,STR ( NUMBR ( SUBST ( '201412' ,1,4))+1,4,0),!Transaction Currency PCR, !Currency PCR);


#endregion

#region Federal Income tax Calc
#PLBEFORETAX feeding xPermTax Calculated
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':{'P3','WU'},'MUNICIPSALES','Transaction Currency']=>
	['Calculated Federal Tax','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'];
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'PLBEFORETAX','Transaction Currency']=>
	['Calculated Federal Tax','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Federal Tax','00','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion

#region Cash allocations
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'P3','xCash200M','00','FPD']=>
	['Entity':'P3','xCash1B','Datasource':'Allocation Calculation','Organizational Unit PCR':'00000-P3','00'];
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Entity':'P3','xCash1B','00','Organizational Unit PCR':'00000-P3']=>
	['Entity':'P3','xCashRemainder','Datasource':'Allocation Calculation','Organizational Unit PCR':'00000-P3','00'];
#endregion

#region Interest Expense calculations
#region TOTDEBT feeding Debt Equity ratio, 2 Month Avg Debt, calc int exp
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'TOTDEBT','Entity':{'P3','WU'},'Transaction Currency']=>
	['Debt-Equity Ratio','Datasource':'Allocation Calculation','Organizational Unit PCR':'00000-P3','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg Debt','Datasource':'Allocation Calculation','Actual','Transaction Currency PCR':'USD','Transaction Currency'],
	['Debt Rate','Datasource':'Allocation Calculation','00','Actual','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg Debt After first round','Datasource':'Allocation Calculation','Actual','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Interest Expense','Datasource':'Allocation Calculation','00','Actual','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Interest Expense 2nd Round','Datasource':'Allocation Calculation','00','Actual','Transaction Currency PCR':'USD','Transaction Currency'];
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'TOTDEBT','Entity':'LM','Transaction Currency']=>
	['Debt-Equity Ratio','Datasource':'Allocation Calculation','00000-LM','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg Debt','Datasource':'Allocation Calculation','Actual','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion
#region Total Assets feeding Calc Debt, Calc Equity
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'TOTASSET','Entity':{'P3','WU'},'Transaction Currency']=>
	['Calculated Debt','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Equity','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'];
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'TOTASSET','Entity':'LM','Transaction Currency'] =>
	['Calculated Debt','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Equity','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion
#region Fixed Portfolio feeding 2 Month Avg Fixed %, Portfolio Fixed 2 Month Avg,xCOUP_RATE_FIX, Debt Rate, 2 Month Avg xCoup_Rate_Fix
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Total Portfolio','Entity':{'P3','WU'},'Fixed Rate','Transaction Currency']=>
	['2 Month Avg Fixed %','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg Portfolio Fixed','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['Debt Rate','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg xCoup_Rate_Fix','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	DB('PCR','2 Month Avg Fixed %','P3', !Organizational Unit PCR, '00', 'Allocation Calculation', !Version, ATTRS ( 'Time Period', !Time Period, 'Next Calendar Period'),'USD','Transaction Currency'),
	DB('PCR','2 Month Avg Portfolio Fixed','P3',!Organizational Unit PCR, '00', 'Allocation Calculation', !Version, ATTRS ( 'Time Period', !Time Period, 'Next Calendar Period'),'USD','Transaction Currency');
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Fixed %','Entity':{'P3','WU'},'Transaction Currency']=>
	['xCOUP_RATE_FIX','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion

#region Floating Portfolio feeding 2 Month Avg Floating %, 2 Month Avg Portfolio Floating, xCOUP_RATE_FLT, Debt Rate, 2 Month Avg xCoup_Rate_Flt
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Total Portfolio','Entity':{'P3','WU'},'Floating Rate','Transaction Currency']=>
	['2 Month Avg Floating %','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg Portfolio Floating','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['Debt Rate','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	['2 Month Avg xCoup_Rate_Flt','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'],
	DB('PCR','2 Month Avg Floating %','P3', !Organizational Unit PCR,'00','Allocation Calculation', !Version,ATTRS ( 'Time Period', !Time Period, 'Next Calendar Period'),'USD','Transaction Currency'),
	DB('PCR','2 Month Avg Portfolio Floating','P3', !Organizational Unit PCR,'00','Allocation Calculation', !Version, ATTRS ( 'Time Period', !Time Period, 'Next Calendar Period'),'USD','Transaction Currency');
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'2 Month Avg Floating %','Entity':{'P3','WU'},'Transaction Currency']=>
	['xCOUP_RATE_FLT','00','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion
#region INTEXPENSE feeding '2 Month Avg Int Expense']

[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'INTEXPENSE','Entity':{'P3','WU'},'Transaction Currency']=>
	['Actual to Calculated Interest Expense Variance','Entity':'P3','00000-P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Interest Expense Adjustment','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['Actual to Calculated Interest Expense Variance 2nd Round','Entity':'P3','00000-P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'],
	['Calculated Interest Expense Adjustment 2nd Round','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'];
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'First Interest Expense Allocation','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency']=>
	['Calculated Interest Expense Adjustment','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'];
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Second Interest Expense Allocation','Entity':{'P3','WU'},'00','Datasource':'Allocation Calculation','Transaction Currency']=>
	['Calculated Interest Expense Adjustment 2nd Round','Entity':'P3','Datasource':'Allocation Calculation','00','Transaction Currency PCR':'USD','Transaction Currency'];
#region Current Month Portfolio feeding 2 Month Avg Portfolio
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},'Total Portfolio','Entity':{'P3','WU'},'Transaction Currency']=>
	['2 Month Avg Portfolio','Entity':'P3','Datasource':'Allocation Calculation','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion
#endregion

#region Calculated Tax Expense on Derivatives
[{'Actual','Plan','Forecast','What If Scenario 1','What If Scenario 2','What If Scenario 3'},{'GLFROMINTRT','FWDPOINTUNRL'},'YTD','Transaction Currency']=>
		['Calculated Tax Expense on Derivatives','00','Datasource':'Allocation Calculation','YTD','Transaction Currency PCR':'USD','Transaction Currency'];
#endregion

#region AFR Feeders
[{'2 Month AVG Payables Balance Stored','S1751103P3','S1751103GV'},'Actual','Transaction Currency'] =>
	['Interest Expense AFR (Pt I) for Allocation','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'],
	['Interest Expense AFR (Pt II) for Allocation','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'],
	['Interest Expense Calculated (% of Total)','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
[{'G00010P300','G00010GV00'},'Actual','Transaction Currency'] =>
	DB('PCR','2 Month AVG Payables Balance',!Entity,!Organizational Unit PCR,'00','Allocation Calculation',!Version,ATTRS('Time Period', !Time Period, 'Next Calendar Period'),'USD','Transaction Currency'),
	DB('PCR','Weighted AVG Rate for AFR',!Entity,!Organizational Unit PCR,'00','Allocation Calculation',!Version,ATTRS('Time Period', !Time Period, 'Next Calendar Period'),'USD','Transaction Currency'),
	['2 Month AVG Payables Balance','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'],
	['Weighted AVG Rate for AFR','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
[{'INTEXPCFSC','S1751103P3','Interest Expense Allocation AFR (Pt II)','Interest Expense Allocation AFR (Pt I)','Interest Expense AFR Assigned','Interest Expense AFR Assigned - Offset','Interest Expense AFR (Pt I) - Offset','Interest Expense AFR (Pt II) -
Offset'},'Actual','Transaction Currency'] =>
	['Interest Expense Delta to Total','Entity':'P3','Organizational Unit PCR':'Not Applicable','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
[{'TOTINTEXP','S1751103GV'},'Actual','Transaction Currency'] =>
	['Interest Expense Delta to Total','Entity':'GV','Organizational Unit PCR':'Not Applicable','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
['Interest Expense Allocation AFR (Pt I)','Actual','Transaction Currency'] =>
	['Interest Expense Calculated (% of Total)','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
['Interest Expense Calculated (% of Total)','Actual','Transaction Currency'] =>
	['Interest Expense AFR (Pt II) for Allocation','00','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
[{'Interest Expense Allocation AFR (Pt II)','Interest Expense Allocation AFR (Pt I)','Interest Expense AFR Assigned','Interest Expense AFR Assigned - Offset','Interest Expense AFR (Pt I) - Offset','Interest Expense AFR (Pt II) - Offset'},'00','Actual','Tr
ansaction Currency'] =>
	['Interest Expense AFR - Tax Impact Calculation','Allocation Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
#endregion

#region Debt Normalization Feeders
['TOTDEBT','Actual','Transaction Currency'] =>
	DB ( 'PCR', 'Avg YTD Debt', !Entity, !Organizational Unit PCR, '00', 'Stat Account & Metrics Calculations', !Version,  !Time Period,'USD','Transaction Currency'),
	DB ( 'PCR', 'Avg YTD Debt', !Entity, !Organizational Unit PCR, '00', 'Stat Account & Metrics Calculations', !Version,attrs('Time Period',!Time Period,'Next Calendar Period'),'USD','Transaction Currency');
['Avg YTD Debt','Actual','Transaction Currency'] =>
	DB ( 'PCR', 'Interest Expense as a % of Avg YTD Debt','Normalization', 'Normalization - ' | ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'Normalization Parent'), '00', 'Allocation Calculation',!Version,!Time Period,'USD','Transaction Currenc
y');
[{'TOTDEBT','TOTEQUITY'},'Actual','Transaction Currency'] =>
	DB ( 'PCR', 'Normalized Equity (Calc)', 'Normalization', 'Normalization - ' | ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'Normalization Parent'), '00', 'Allocation Calculation',!Version,!Time Period,'USD','Transaction Currency'),
	DB ( 'PCR', 'Normalized Debt (Calc)','Normalization', 'Normalization - ' | ATTRS ('Organizational Unit PCR',!Organizational Unit PCR,'Normalization Parent'), '00', 'Allocation Calculation',!Version,!Time Period,'USD','Transaction Currency');
['Normalized Equity (Calc)','Entity':'Normalization','Actual','Transaction Currency'] =>
	['Equity Normalization Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
['Normalized Debt (Calc)','Entity':'Normalization','Actual','Transaction Currency'] =>
	['Debt Normalization Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
['Debt Normalization Calculation','Entity':'Normalization','00','Allocation Calculation','Actual','Transaction Currency'] =>
	['Interest Expense Debt Normalization - Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
['Interest Expense Debt Normalization - Calculation','Entity':'Normalization','00','Allocation Calculation','Actual','Transaction Currency'] =>
	['Interest Expense Debt Normalization - Tax Impact Calculation','Transaction Currency PCR':'USD','Currency PCR':'Transaction Currency'];
#endregion

#region Allocate Cash based on % of Portfolio Opening Balance: calculate Portfolio Opening Balance
['Total Portfolio','Actual','Dec Prior Year','Transaction Currency'] =>
	DB ( 'PCR', 'Portfolio Opening Balance', !Entity, !Organizational Unit PCR, '00','Allocation Calculation',!Version,STR ( NUMBR ( SUBST ( ELCOMP ( 'Time Period', 'Dec Prior Year', 1) ,1,4))+1,4,0),'USD','Transaction Currency');
#endregion

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['Gross Portfolio', {'Actual','Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', 'YTD Avg Gross Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR ),
	['AVG Gross Portfolio', '00'],
	DB( 'PCR', 'AVG Gross Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#need these feeder because Gross Portfolio, Total POrtfolio, Retail POrtfolio, Wholesale Portfolio, Total Assets, Total Equity, Total Debt, Total Managed Assets  may be 0 for the current period,
#therefore the current month calculation will feed the next month's and so on
[{'YTD Avg Gross Portfolio', 'YTD Avg Total Portfolio', 'YTD Avg Retail Portfolio', 'YTD Avg Wholesale Portfolio', 'YTD AVERAGE Assets', 'YTD AVERAGE EQUITY (Excluding NCI)',
'YTD AVERAGE DEBT', 'YTD AVERAGE MANAGED ASSETS', 'AVG Wholesale Portfolio'}, {'Actual','Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', !Account PCR, !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
[{'Total Portfolio', 'Total Portfolio for Key Measures'}, {'Actual', 'Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', 'YTD Avg Total Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR ),
	['AVG Total Portfolio', '00'],
	DB( 'PCR', 'AVG Total Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['Retail Portfolio', {'Actual', 'Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', 'YTD Avg Retail Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR ),
	['AVG Retail Portfolio', '00'],
	DB( 'PCR', 'AVG Retail Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
[{'Wholesale Portfolio', 'Wholesale Portfolio for Key Measures'}, {'Actual', 'Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', 'YTD Avg Wholesale Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR ),
	['AVG Wholesale Portfolio', '00'],
	DB( 'PCR', 'AVG Wholesale Portfolio', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['TOTASSET', {'Actual', 'Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', 'YTD Average Assets', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR ),
	['Average Assets', '00'],
	DB( 'PCR', 'AVERAGE ASSETS', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['TOTEQUITY', {'Actual', 'Plan'}, 'Transaction Currency'] =>
	['AVERAGE EQUITY (Excluding NCI)', '00'],
	DB( 'PCR', 'AVERAGE EQUITY (Excluding NCI)', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR ),
	DB( 'PCR', 'YTD AVERAGE EQUITY (Excluding NCI)', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['TOTDEBT for Key Measures', {'Actual', 'Plan'}, 'Transaction Currency'] =>
	DB( 'PCR', 'YTD AVERAGE DEBT', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR ),
	['AVERAGE DEBT', '00'],
	DB( 'PCR', 'AVERAGE DEBT', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Removed feeder for YTD Average Managed Assets - replaced by feeders in next section, Gavin D. 9/28/16
['Account PCR':'MANAGED ASSETS', {'Actual', 'Plan'}, 'Transaction Currency'] =>
	['AVERAGE MANAGED ASSETS', '00'],
	DB( 'PCR', 'AVERAGE MANAGED ASSETS', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'Next Calendar Period' ), !Transaction Currency PCR, !Currency PCR );
	#DB('PCR', 'YTD AVERAGE MANAGED ASSETS', !Entity, !Organizational Unit PCR, '00', 'Key Measures Calculation', !Version, !Time Period | ' YTD', !Transaction Currency PCR, !Currency PCR);
#endregion

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['Account PCR':'MANAGED ASSETS', {'Actual', 'Plan'}, 'Transaction Currency', 'Dec Prior Year', 'All Program Types'] =>
	DB( 'PCR', 'YTD Average Managed Assets', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, !Time Period, !Transaction Currency PCR, !Currency PCR );

##QUEBIT RULE CHANGE - Changed on 4/7/2017
['Managed Assets YTD Total for AVG calc', {'Actual', 'Plan'}, 'Transaction Currency', {'201512 YTD', '201612 YTD', '201712 YTD', '201812 YTD'}, 'All Program Types'] =>
	DB( 'PCR', 'YTD Average Managed Assets', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'YTD' ), !Transaction Currency PCR, !Currency PCR );
###End modification of YTD Average Managed Assets feeders

#Gavin D. added 9/28/16. Key measures feeders.

['xNB-COMM ACCT',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD New Business-CFCA',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['TOTREVENUE',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD TOTREVENUE',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['Accountable Profit',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD Accountable Profit',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['PLBEFORENCI',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD PLBEFORENCI',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['New Business-Retail',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD New Business-Retail',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['xNB-WHOLESALE',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD New Business-Wholesale',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

[{'xNB-WHOLESALE','xNB-RETAIL'},{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD Total New Business',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['CFSC Revenue - Margin',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD CFSC Revenue - Margin',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['CFSC Interest Expense - Margin (Includes Points On Forward)',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD CFSC Interest Expense - Margin (Includes Points On Forward)',!Entity,!Organizational Unit PCR,!Program Type
,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

[{'CFSC Revenue - Margin','CFSC Interest Expense - Margin (Includes Points On Forward)'},{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD CFSC Margin Dollars',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['TOTGENOPADM',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] => DB('PCR','YTD SG&A',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,
ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['PROVCREDIT',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD PROVCREDIT',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['RETAIL REVENUE YIELD',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD RETAIL REVENUE YIELD',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['WHOLESALE REVENUE YIELD',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD WHOLESALE REVENUE YIELD',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Calculation Change 10/26/2016; Gavin Driskell
['WRITE-OFFS - NET', '00', {'201412 YTD', '201512 YTD', '201612 YTD', '201712 YTD', '201812 YTD'}] =>
	DB( 'PCR', 'YTD Write-Offs', !Entity, !Organizational Unit PCR, '00', !Datasource, !Version, ATTRS( 'Time Period', !Time Period, 'YTD' ), !Transaction Currency PCR, !Currency PCR );
#End Calculation Change 10/26/2016

['NetInc',{'201412 YTD','201512 YTD','201612 YTD','201712 YTD','201812 YTD'}] =>
DB('PCR','YTD Net Inc',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,!Version,ATTRS ( 'Time Period', !Time Period, 'YTD'),!Transaction Currency PCR,!Currency PCR);

['Average Managed Assets',{'2014-YTD','2015-YTD','2016-YTD','2017-YTD','2018-YTD'}] => DB('PCR','YTD AVERAGE MANAGED ASSETS',!Entity,!Organizational Unit PCR,!Program Type,!Datasource,
	!Time Period, !Transaction Currency PCR,!Currency PCR);

['CFSC REVENUE - EXTERNAL MARGIN'] => ['MTD ANNUALIZED CFSC REVENUE - EXTERNAL MARGIN'] ;
['CFSC Interest Expense - Margin (Includes Ptns on Forward)'] => ['MTD ANNUALIZED CFSC INTEREST EXPENSE - MARGIN'] ;

##QUEBIT RULE CHANGE - Changed on 4/7/2017
#Added 9/28/16, Gavin D.
[{'SALLOWANCE220', 'SALLOWANCE230'}] =>
	['WRITE-OFFS - NET', '00'] ;

#End new  Key measures feeders, Gavin D. added 9/28/16.

#['TOTASSET', {'Actual','Plan'}, '00', 'CIF Allocation Sources'] => DB('PCR Inputs','xOBAssets',!Entity,!Organizational Unit PCR,!Version,SUBST(ATTRS ('Time Period',!Time Period,'Next Calendar Period'),1,4) | '01');
#['TOTASSET', {'Actual','Plan'}, '00', 'CIF Allocation Sources'] => DB('PCR', 'xOBAssets', !Entity, !Organizational Unit PCR, '00', 'Input', !Version, 'YTD', !Transaction Currency PCR, !Currency PCR);
#['Total Portfolio for Key Measures', {'Actual','Plan'}] => DB('PCR Inputs','xOBPortfolio',!Entity,!Organizational Unit PCR,!Version,SUBST(ATTRS ('Time Period',!Time Period,'Next Calendar Period'),1,4) | '01');
#['Total Portfolio for Key Measures', {'Actual','Plan'}] => DB('PCR', 'xOBPortfolio', !Entity, !Organizational Unit PCR, '00', 'Input', !Version, 'YTD', !Transaction Currency PCR, !Currency PCR);
